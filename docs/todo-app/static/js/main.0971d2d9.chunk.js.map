{"version":3,"sources":["Header.js","TodoItem.js","TodoList.js","InputTodo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","TodoItem","props","content","onClick","onDelete","id","TodoList","console","log","data","length","todos","map","todo","index","key","InputTodo","state","todoText","handleChange","bind","handleSubmit","event","preventDefault","this","onSubmitTodo","setState","target","name","value","onSubmit","type","placeholder","onChange","React","Component","App","handleDelete","prevState","updatedArray","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSAQeA,MANf,WACI,OACI,wBAAIC,UAAU,2BAAd,uBCOOC,MATf,SAAkBC,GACd,OACI,yBAAKF,UAAU,aACVE,EAAMC,QACP,4BAAQH,UAAU,yBAAyBI,QAAS,kBAAMF,EAAMG,SAASH,EAAMI,SCS5EC,MAZf,SAAkBL,GACdM,QAAQC,IAAIP,EAAMQ,KAAKC,QACvB,IAAMC,EAAQV,EAAMQ,KAAKG,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CAAUZ,QAASW,EAAME,IAAKD,EAAOT,GAAIS,EAAOV,SAAUH,EAAMG,cAE3E,OACI,yBAAKL,UAAU,gBACZY,I,OCmCIK,E,kDA1CX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAU,IAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANV,E,yDASDE,GACTA,EAAMC,iBACqB,KAAxBC,KAAKP,MAAMC,WACdM,KAAKvB,MAAMwB,aAAaD,KAAKP,MAAMC,UACnCM,KAAKE,SAAS,CACVR,SAAU,Q,mCAILI,GAAQ,IAAD,EACMA,EAAMK,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MACbL,KAAKE,SAAL,eACKE,EAAOC,M,+BAKZ,OACI,0BAAMC,SAAUN,KAAKH,cACjB,2BACItB,UAAU,kBACVgC,KAAK,OACLH,KAAK,WACLC,MAAOL,KAAKP,MAAMC,SAClBc,YAAY,sBACZC,SAAUT,KAAKL,eAEnB,4BAAQpB,UAAU,UAAlB,kB,GArCQmC,IAAMC,WC8CfC,E,kDAzCX,aAAe,IAAD,8BACV,gBACKnB,MAAQ,CACTN,MAAO,IAEX,EAAKU,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKiB,aAAe,EAAKA,aAAajB,KAAlB,gBANV,E,yDASDP,GAAO,IAAD,OAEfW,KAAKE,UAAS,SAACY,GAGX,OAFA/B,QAAQC,IAAI8B,GAEL,CACH3B,MAFc,sBAAO,EAAKM,MAAMN,OAAlB,CAAyBE,U,mCAOtCC,GACT,IAAMyB,EAAY,YAAOf,KAAKP,MAAMN,OACpC4B,EAAaC,OAAO1B,EAAO,GAC3BU,KAAKE,SAAS,CACVf,MAAO4B,M,+BAKX,OACI,yBAAKxC,UAAU,WACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAW0B,aAAcD,KAAKH,eAC9B,kBAAC,EAAD,CAAUZ,KAAMe,KAAKP,MAAMN,MAAOP,SAAUoB,KAAKa,qB,GAnCnDH,IAAMC,WCMJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.0971d2d9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return(\n        <h1 className='title has-text-centered'>A Simple To Do App</h1>\n    )\n}\n\nexport default Header","import React from \"react\";\n\nfunction TodoItem(props) {  \n    return (\n        <div className='list-item'>\n            {props.content}\n            <button className='delete is-pulled-right' onClick={() => props.onDelete(props.id)}></button>\n        </div>\n    )\n}\n\nexport default TodoItem","import React from 'react'\nimport TodoItem from './TodoItem'\n\nfunction TodoList(props) {\n    console.log(props.data.length)\n    const todos = props.data.map((todo, index) => {\n        return <TodoItem content={todo} key={index} id={index} onDelete={props.onDelete}/>\n      });\n    return( \n        <div className='list-wrapper'>\n          {todos}\n        </div>\n    );\n}\n\nexport default TodoList","import React from 'react';\n\nclass InputTodo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            todoText: \"\"\n        } \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if(this.state.todoText === \"\") return\n        this.props.onSubmitTodo(this.state.todoText);\n        this.setState({\n            todoText: \"\"\n        });\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input \n                    className='input is-medium'\n                    type=\"text\" \n                    name=\"todoText\"\n                    value={this.state.todoText}\n                    placeholder=\"What's On Your Mind\"\n                    onChange={this.handleChange}\n                />\n                <button className='button'>Add To Do</button>\n            </form>\n        )\n    }\n}\n\nexport default InputTodo","import React from 'react';\nimport './App.css';\nimport Header from './Header'\nimport TodoList from './TodoList';\nimport InputTodo from './InputTodo';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            todos: []\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    handleSubmit(todo) {\n        // console.log(task);\n        this.setState((prevState) => {\n            console.log(prevState)\n            const updatedTodos = [...this.state.todos, todo];\n            return {\n                todos: updatedTodos\n            };\n        });\n    }\n    \n    handleDelete(index){\n        const updatedArray = [...this.state.todos];\n        updatedArray.splice(index, 1);\n        this.setState({\n            todos: updatedArray\n        });\n    }\n\n    render() {\n        return ( \n            <div className='wrapper'>\n                <div className='card frame'>\n                    <Header />\n                    <InputTodo onSubmitTodo={this.handleSubmit}/>\n                    <TodoList data={this.state.todos} onDelete={this.handleDelete}/>\n                </div>\n            </div>   \n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bulma/css/bulma.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}