{"version":3,"sources":["Components/Control.js","Components/Details.js","Components/Main.js","Components/WeekDetails.js","Components/Week.js","Components/Map.js","Components/App.js","serviceWorker.js","index.js"],"names":["Control","props","className","style","width","placeholder","value","location","onChange","event","name","onClick","icon","Details","weather","undefined","wind_speed","units","humidity","dewpoint","weather_code","baro_pressure","Main","day","loading","date","getHours","img_src","includes","process","console","log","src","alt","temp","feels_like","WeekDetails","data","dateReadable","Date","parse","observation_time","toDateString","split","display","alignItems","justifyContent","margin","min","max","Week","week_details","map","index","key","id","require","config","styles","height","long2tile","lon","zoom","Math","floor","pow","lat2tile","lat","tan","PI","cos","Map","useState","setMap","mapContainer","useRef","useEffect","mapboxgl","accessToken","container","current","center","on","resize","addSource","type","tiles","tileSize","attribution","addLayer","source","minzoom","maxzoom","initializeMap","ref","el","App","done","setDone","setLocation","setWeather","coordinates","setCoordinates","setDate","long","a","getDate","toISOString","fetch","then","response","json","catch","error","day_weather","week_weather","week","fetchData","target","features","div","library","add","fas","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e2b64cbd.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function Control(props) {\n  // console.log(props);\n  function handleChange(event) {\n    props.onChange(event);\n  }\n  function handleClick() {\n    props.onClick();\n  }\n\n  return (\n    <div className=\"control\">\n      <input\n        style={{ width: '50%' }}\n        className=\"input\"\n        placeholder=\"Enter Location\"\n        value={props.location}\n        onChange={handleChange}\n        name=\"location\"\n      ></input>\n      <button className=\"button\" onClick={handleClick}>\n        <FontAwesomeIcon icon={['fas', 'search']} />\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Details(props) {\n  const { weather } = props;\n  let loading = undefined;\n  typeof weather === undefined ? (loading = true) : (loading = false);\n\n  if (!loading) {\n    return (\n      <div className=\"detailsWrapper\">\n        <div className=\"details\">\n          <div className=\"wind\">\n            <span className=\"label\">Wind:</span>\n            <span>\n              {weather.wind_speed.value} {weather.wind_speed.units}\n            </span>\n          </div>\n          <div className=\"humidity\">\n            <span className=\"label\">Humidity:</span>\n            <span>\n              {weather.humidity.value} {weather.humidity.units}\n            </span>\n          </div>\n          <div className=\"dew_point\">\n            <span className=\"label\">Dew Point:</span>\n            <span>\n              {weather.dewpoint.value} {weather.dewpoint.units}\n            </span>\n          </div>\n          <div className=\"visibility\">\n            <span className=\"label\">Visibility:</span>\n            <span>{weather.weather_code.value}</span>\n          </div>\n          <div className=\"pressure\">\n            <span className=\"label\">Pressure:</span>\n            <span>\n              {weather.baro_pressure.value}{' '}\n              {weather.baro_pressure.units}\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return <div>Loading</div>;\n}\n","import React from 'react';\nrequire('dotenv').config();\n\nexport default function Main(props) {\n  const { weather, date } = props;\n  let loading = undefined;\n  typeof weather === undefined ? (loading = true) : (loading = false);\n\n  const time = date.getHours();\n  let day;\n  time > 18 ? (day = '_night') : (day = '_day');\n  const weather_array = ['partly_cloudy', 'mostly_clear', 'clear'];\n\n  if (!loading) {\n    let img_src;\n    img_src = weather_array.includes(weather.weather_code.value)\n      ? (img_src = `${process.env.REACT_APP_PUBLIC_URL}${weather.weather_code.value}${day}.svg`)\n      : (img_src = `${process.env.REACT_APP_PUBLIC_URL}${weather.weather_code.value}.svg`);\n\n    console.log(img_src);\n    return (\n      <div className=\"center\">\n        <div className=\"title\">\n          <span className=\"currently\">\n            <span className=\"icon\">\n              <img src={img_src} alt=\"product\" />\n            </span>\n            <span className=\"description\">\n              <span className=\"summary\">\n                <span className=\"label\">Temperature:</span>\n                <span>\n                  {weather.temp.value} &deg;{weather.temp.units}\n                </span>\n              </span>\n              <span className=\"summary-high-low\">\n                <span className=\"label\">Feels Like:</span>\n                <span>\n                  {weather.feels_like.value} &deg;\n                  {weather.feels_like.units}\n                </span>\n              </span>\n            </span>\n          </span>\n        </div>\n      </div>\n    );\n  }\n  return <div> Loading </div>;\n}\n","import React from 'react';\nrequire('dotenv').config();\n\nexport default function WeekDetails(props) {\n  //   console.log(props);\n  const { data } = props;\n  const weather_array = ['partly_cloudy', 'mostly_clear', 'clear'];\n  let img_src;\n  img_src = weather_array.includes(data.weather_code.value)\n    ? (img_src = `${process.env.REACT_APP_PUBLIC_URL}${data.weather_code.value}_day.svg`)\n    : (img_src = `${process.env.REACT_APP_PUBLIC_URL}${data.weather_code.value}.svg`);\n  let dateObject = new Date(Date.parse(data.observation_time.value));\n  let dateReadable = dateObject.toDateString().split(' ')[0];\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        margin: '.5em 0em',\n      }}\n    >\n      <div>{dateReadable}</div>\n      <div>\n        <span className=\"icon\">\n          <img src={img_src} alt=\"product\" />\n        </span>\n      </div>\n      <div>\n        Min: {data.temp[0].min.value} &deg;{data.temp[0].min.units}\n        <br />\n        Max: {data.temp[1].max.value} &deg;{data.temp[1].max.units}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport WeekDetails from './WeekDetails';\n\nexport default function Week(props) {\n  // console.log(props);\n  const { weather } = props;\n  const week_details = weather.map((day, index) => {\n    // console.log(day);\n    return (\n      <WeekDetails data={day} key={index} id={index}></WeekDetails>\n    );\n  });\n  return typeof props.weather === undefined ? (\n    <div>1 </div>\n  ) : (\n    week_details\n  );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst styles = {\n  width: '100vw',\n  height: '50vh',\n};\n\n// Convert Lat and Long to Tile Numbers to query correct tiles to display weather\n// Adapted from https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\nfunction long2tile(lon, zoom) {\n  return Math.floor(((lon + 180) / 360) * Math.pow(2, zoom));\n}\nfunction lat2tile(lat, zoom) {\n  return Math.floor(\n    ((1 -\n      Math.log(\n        Math.tan((lat * Math.PI) / 180) +\n          1 / Math.cos((lat * Math.PI) / 180),\n      ) /\n        Math.PI) /\n      2) *\n      Math.pow(2, zoom),\n  );\n}\n\nexport default function Map(props) {\n  // console.log(props);\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n  console.log('x', lat2tile(props.location[1], 10));\n  console.log('y', long2tile(props.location[0], 10));\n  useEffect(() => {\n    mapboxgl.accessToken = `pk.eyJ1Ijoic3JpLWdvIiwiYSI6ImNrODUyeHp1YjAyb2wzZXA4b21veGhqdjgifQ.wprAUOeXWkoWy1-nbUd1NQ`;\n    const initializeMap = ({ setMap, mapContainer }) => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/light-v10', // stylesheet location\n        center: [props.location[1], props.location[0]],\n        zoom: 13,\n      });\n\n      map.on('load', () => {\n        setMap(map);\n        map.resize();\n        map.addSource('climacell-api', {\n          type: 'raster',\n          tiles: [\n            `https://api.climacell.co/v3/weather/layers/temperature/now/10/${lat2tile(\n              props.location[1],\n              10,\n            )}/${long2tile(\n              props.location[0],\n              10,\n            )}.png?apikey=WgGx8VA8VQUANapmJ6AkIEmObMfbWt9d`,\n          ],\n          tileSize: 256,\n          attribution:\n            '&copy; <a href=\"https://www.climacell.co/weather-api\">Powered by ClimaCell</a>',\n        });\n        map.addLayer({\n          id: 'radar-tiles',\n          type: 'raster',\n          source: 'climacell-api',\n          minzoom: 1,\n          maxzoom: 12,\n        });\n      });\n    };\n\n    if (!map) initializeMap({ setMap, mapContainer });\n  }, [map]);\n\n  return (\n    <div ref={(el) => (mapContainer.current = el)} style={styles} />\n  );\n}\n\n// map.addSource('climacell-api', {\n//   \"type\": 'raster',\n//   \"tiles\": [`https://api.climacell.co/v3/weather/layers/${CC_DATA_FIELD}/${CC_TIMESTAMP}/{zoom}/{coord.x}/{coord.y}.png?apikey=${CC_API_KEY}`],\n//   \"tileSize\": 256,\n//   \"attribution\": '&copy; <a href=\"https://www.climacell.co/weather-api\">Powered by ClimaCell</a>'\n// });\n// map.addLayer({\n//   \"id\": \"radar-tiles\",\n//   \"type\": \"raster\",\n//   \"source\": \"climacell-api\",\n//   \"minzoom\": 1,\n//   \"maxzoom\": 12\n// });\n","import React, { useState, useEffect } from 'react';\nimport Control from './Control';\nimport Details from './Details';\nimport Main from './Main';\nimport Week from './Week';\nimport Map from './Map';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport '../Styles/App.css';\nimport 'bulma/css/bulma.css';\nlibrary.add(fas);\n\n\nexport default function App() {\n  const [done, setDone] = useState(undefined);\n  const [location, setLocation] = useState('');\n  const [weather, setWeather] = useState(undefined);\n  const [coordinates, setCoordinates] = useState([\n    40.741621,\n    -73.99353,\n  ]);\n  const [date, setDate] = useState();\n\n  useEffect(() => {\n    let lat, long;\n    //default to NYC to get data\n    console.log(coordinates);\n    lat = coordinates[0];\n    long = coordinates[1];\n\n    const fetchData = async function () {\n      let date = new Date();\n      setDate(date);\n      date.setDate(date.getDate() + 7);\n      date = date.toISOString();\n\n      const day_weather = await fetch(\n        `https://api.climacell.co/v3/weather/realtime?lat=${lat}&lon=${long}&unit_system=us&fields%5B%5D=temp&fields%5B%5D=feels_like&fields%5B%5D=baro_pressure&fields%5B%5D=wind_speed&fields%5B%5D=dewpoint&fields%5B%5D=humidity&fields%5B%5D=weather_code&apikey=WgGx8VA8VQUANapmJ6AkIEmObMfbWt9d`,\n      )\n        .then((response) => response.json())\n        .catch((error) => console.log(error));\n\n      const week_weather = await fetch(\n        `https://api.climacell.co/v3/weather/forecast/daily?lat=${lat}&lon=${long}&end_time=${date}&fields%5B%5D=temp&fields%5B%5D=weather_code&unit_system=us&apikey=WgGx8VA8VQUANapmJ6AkIEmObMfbWt9d`,\n      )\n        .then((response) => response.json())\n        .catch((error) => console.log(error));\n\n      // const weather_tiles = await fetch(`https://api.climacell.co/v3/weather/layers/temperature/now/10/1/0.png?apikey=WgGx8VA8VQUANapmJ6AkIEmObMfbWt9d\n      // `)\n      //   .then((response) => response.json())\n      //   .then((response) => console.log(response))\n      //   .catch((error) => console.log(error));\n\n      const combined = { day: day_weather, week: week_weather };\n      setWeather(combined);\n      setDone(true);\n    };\n\n    fetchData();\n  }, [coordinates]);\n\n  function handleChange(event) {\n    setLocation(event.target.value);\n  }\n\n  function handleClick() {\n    setDone(false);\n    //Gets location inputted and fetches geocoded location data\n    //Sends geocode to getWeather function to return weather data and then sets it to state\n    fetch(\n      `https://api.mapbox.com/geocoding/v5/mapbox.places/${location}.json?access_token=pk.eyJ1Ijoic3JpLWdvIiwiYSI6ImNrODUyeHp1YjAyb2wzZXA4b21veGhqdjgifQ.wprAUOeXWkoWy1-nbUd1NQ`,\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        //returns promise of weather-data\n        let lat = response.features[0].center[1];\n        let long = response.features[0].center[0];\n        setCoordinates([lat, long]);\n      })\n      .catch((error) => console.log(error));\n  }\n\n  return (\n    <div className=\"App\">\n      <Control\n        location={location}\n        onChange={handleChange}\n        onClick={handleClick}\n      />\n      {!done ? (\n        <div\n          div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100%',\n          }}\n        >\n          Loading\n        </div>\n      ) : (\n        <div>\n          <div className=\"main-info\">\n            <Details weather={weather.day} />\n            <Main weather={weather.day} date={date} />\n          </div>\n          <div className=\"map\">\n            <Map location={coordinates} />\n          </div>\n          <div className=\"week-info\">\n            <Week weather={weather.week} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}