{"version":3,"sources":["Components/Control.js","Components/Details.js","Components/Main.js","Components/Bar.js","Components/WeekDetails.js","Components/Week.js","Components/Map.js","Components/App.js","serviceWorker.js","index.js"],"names":["Control","props","geocoder","useRef","mapboxGeocoder","MapboxGeocoder","accessToken","process","types","useEffect","addTo","current","on","Object","sendLocation","result","center","className","onClick","src","style","width","height","ref","zIndex","maxWidth","textAlign","top","Details","weather","wind_speed","value","units","humidity","dewpoint","weather_code","baro_pressure","Main","day","date","getHours","img_src","includes","alt","temp","feels_like","Bar","max","min","numSteps","stepPercent","marginLeftSteps","data","marginLeft","display","position","margin","lineHeight","fontWeight","minHeight","backgroundColor","borderRadius","WeekDetails","dateReadable","Date","parse","observation_time","toDateString","split","justifyContent","Week","map","index","undefined","key","id","Map","location","lat","lng","zoom","mapField","App","useState","loading","setLoading","setWeather","coordinates","setCoordinates","setDate","fetchData","long","a","hourly_date","getDate","toISOString","weekly_date","fetch","then","response","json","catch","error","console","log","day_weather","hourly_weather","week_weather","Promise","all","values","hourly","week","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4a70ea62.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport { us } from '@mapbox/mapbox-gl-geocoder/lib/exceptions';\n\nexport default function Control(props) {\n  const geocoder = useRef();\n  \n  let accessToken = process.env.REACT_APP_MAPBOX_KEY; //mapbox geocoder api key\n  \n  // initalize an instance of Mapbox Geocoder\n  let mapboxGeocoder = new MapboxGeocoder({\n    accessToken: accessToken,\n    types: 'country,region,place,postcode,locality,neighborhood',\n  });\n  \n  // mount the geocoder to the DOM on load\n  useEffect(() => {\n    mapboxGeocoder.addTo(geocoder.current);\n  }, []);\n\n  useEffect(() => {\n    mapboxGeocoder.on('result', (Object) => {\n      props.sendLocation(Object.result.center);\n    });\n  });\n\n  return (\n    <div className=\"control\">\n      <a\n        // className=\"button\"\n        onClick={props.onClick()}\n      >\n        <img\n          src=\"./Assets/cbimage.jpg\"\n          style={{ width: '16px', height: '16px' }}\n        />\n      </a>\n      <div\n        ref={geocoder}\n        style={{\n          zIndex: 1,\n          width: '100%',\n          maxWidth: '900px',\n          textAlign: 'center',\n          top: '20px',\n        }}\n      ></div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Details(props) {\n  const { weather } = props;\n  \n  return (\n    <div className=\"detailsWrapper\">\n      <div className=\"details\">\n        <div className=\"wind\">\n          <span className=\"label\">Wind:</span>\n          <span>\n            {weather.wind_speed.value} {weather.wind_speed.units}\n          </span>\n        </div>\n        <div className=\"humidity\">\n          <span className=\"label\">Humidity:</span>\n          <span>\n            {weather.humidity.value} {weather.humidity.units}\n          </span>\n        </div>\n        <div className=\"dew_point\">\n          <span className=\"label\">Dew Point:</span>\n          <span>\n            {weather.dewpoint.value} {weather.dewpoint.units}\n          </span>\n        </div>\n        <div className=\"visibility\">\n          <span className=\"label\">Visibility:</span>\n          <span>{weather.weather_code.value}</span>\n        </div>\n        <div className=\"pressure\">\n          <span className=\"label\">Pressure:</span>\n          <span>\n            {weather.baro_pressure.value}{' '}\n            {weather.baro_pressure.units}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Main(props) {\n  const { weather, date } = props;\n\n  const time = date.getHours();\n  let day;\n  time > 18 ? (day = '_night') : (day = '_day');\n  const weather_array = ['partly_cloudy', 'mostly_clear', 'clear'];\n\n  let img_src;\n  img_src = weather_array.includes(weather.weather_code.value)\n    ? (img_src = `${process.env.PUBLIC_URL}/Assets/color/${weather.weather_code.value}${day}.svg`)\n    : (img_src = `${process.env.PUBLIC_URL}/Assets/color/${weather.weather_code.value}.svg`);\n  \n  return (\n    <div className=\"center\">\n      <div className=\"title\">\n        <span className=\"currently\">\n          <span className=\"icon\">\n            <img src={img_src} alt=\"product\" />\n          </span>\n          <span className=\"description\">\n            <span className=\"summary\">\n              <span className=\"label\">Temperature:</span>\n              <span>\n                {weather.temp.value}&deg;{weather.temp.units}\n              </span>\n            </span>\n            <span className=\"summary-high-low\">\n              <span className=\"label\">Feels Like:&nbsp;</span>\n              <span>\n                {weather.feels_like.value}&deg;\n                {weather.feels_like.units}\n              </span>\n            </span>\n          </span>\n        </span>\n      </div>\n      <div className=\"timeline\"></div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Bar(props) {\n  const max = props.max;\n  const min = props.min;\n  const numSteps = max - min;\n  const stepPercent = 100 / numSteps;\n  const marginLeftSteps = props.data[0] - min;\n  const marginLeft = marginLeftSteps * stepPercent;\n  const high = max - props.data[1];\n  const width = (numSteps - marginLeftSteps - high) * stepPercent;\n\n  return (\n    <span\n      style={{\n        display: 'block',\n        position: 'relative',\n        width: '570px',\n        height: '100%',\n        margin: '0em 3em 1em',\n      }}\n    >\n      {/* Min Temp */}\n      <span\n        style={{\n          textAlign: 'right',\n          marginLeft: '-55px',\n          lineHeight: '24px',\n          fontWeight: '16px',\n          fontWeight: '400',\n          display: 'block',\n          position: 'absolute',\n          width: '50px',\n          height: '24px',\n          left: `${marginLeft}%`,\n        }}\n      >\n        {props.data[0]}&#730;\n      </span>\n      {/* Bar */}\n      <span\n        style={{\n          display: 'block',\n          position: 'absolute',\n          marginLeft: `${marginLeft}%`,\n          width: `${width}%`,\n          minHeight: '20px',\n          backgroundColor: `#333`,\n          borderRadius: '10px',\n        }}\n      ></span>\n      {/* Max Temp */}\n      <span\n        style={{\n          textAlign: 'left',\n          marginLeft: '7px',\n          lineHeight: '24px',\n          fontWeight: '16px',\n          fontWeight: '400',\n          display: 'block',\n          position: 'absolute',\n          width: '50px',\n          height: '24px',\n          left: `${marginLeft + width}%`,\n        }}\n      >\n        {props.data[1]}&#730;\n      </span>\n    </span>\n  );\n}\n","import React from 'react';\nimport Bar from './Bar';\n\nexport default function WeekDetails(props) {\n  const { max, min, data } = props;\n  const weather_array = ['partly_cloudy', 'mostly_clear', 'clear'];\n  let img_src;\n  img_src = weather_array.includes(data.weather_code.value)\n    ? (img_src = `./Assets/color/${data.weather_code.value}_day.svg`)\n    : (img_src = `./Assets/color/${data.weather_code.value}.svg`);\n  let dateObject = new Date(Date.parse(data.observation_time.value));\n  let dateReadable = dateObject.toDateString().split(' ')[0];\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '1em 0.5em',\n      }}\n    >\n      <div style={{ margin: '0em 1em 1em' }}>{dateReadable}</div>\n      <div>\n        <span style={{ margin: '0em 1em 1em' }} className=\"icon\">\n          <img src={img_src} alt=\"product\" />\n        </span>\n      </div>\n      <Bar\n        max={max}\n        min={min}\n        data={[data.temp[0].min.value, data.temp[1].max.value]}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport WeekDetails from './WeekDetails';\n\nexport default function Week(props) {\n  const { weather } = props;\n\n  let max, min;\n  const findMaxMin = weather.map((day, index) => {\n    // if max and min are undefined, store the value at the current index\n    if (max === undefined && min === undefined) {\n      min = day.temp[0].min.value;\n      max = day.temp[1].max.value;\n    }\n    if (max && min !== undefined) {\n      if (day.temp[0].min.value < min) {\n        // if the min at the current index is less than the stored min\n        min = day.temp[0].min.value;\n      }\n      // if the max at current day is greater than stored max\n      if (day.temp[1].max.value > max) {\n        max = day.temp[1].max.value;\n      }\n    }\n  });\n\n  const weekDetails = weather.map((day, index) => {\n    return (\n      <div\n        style={{\n          width: '100%',\n          maxWidth: '830px',\n          margin: '0 auto',\n        }}\n        className=\"week-info\"\n      >\n        <WeekDetails\n          max={max}\n          min={min}\n          data={day}\n          key={index}\n          id={index}\n        />\n      </div>\n    );\n  });\n  return weekDetails;\n\n}\n","import React from 'react';\nimport DarkskyMap from 'react-darksky-map';\n\nconst styles = {\n  width: '100vw',\n  height: '50vh',\n};\n\nexport default function Map(props) {\n  const { location } = props;\n  const lat = location[0];\n  const lng = location[1];\n  return (\n    <DarkskyMap\n      lat={lat}\n      lng={lng}\n      zoom={10}\n      mapField=\"temp\"\n    ></DarkskyMap>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport FadeIn from 'react-fade-in';\n\nimport Control from './Control';\nimport Details from './Details';\nimport Main from './Main';\nimport Week from './Week';\nimport Map from './Map';\n\nimport '../Styles/App.css';\nimport 'bulma/css/bulma.css';\n\nexport default function App() {\n  const [loading, setLoading] = useState(true);\n  const [weather, setWeather] = useState();\n  const [coordinates, setCoordinates] = useState([\n    40.741621,\n    -73.99353,\n  ]);\n  const [date, setDate] = useState();\n\n  // returns weather data\n  const fetchData = async (lat, long) => {\n    let date = new Date();\n    setDate(date);\n\n    let hourly_date = date.setDate(date.getDate() + 1);\n    hourly_date = date.toISOString();\n    let weekly_date = date.setDate(date.getDate() + 7);\n    weekly_date = date.toISOString();\n\n    const day_weather = await fetch(\n      `https://api.climacell.co/v3/weather/realtime?lat=${lat}&lon=${long}&unit_system=us&fields%5B%5D=temp&fields%5B%5D=feels_like&fields%5B%5D=baro_pressure&fields%5B%5D=wind_speed&fields%5B%5D=dewpoint&fields%5B%5D=humidity&fields%5B%5D=weather_code&apikey=${process.env.REACT_APP_CLIMACELL_KEY}`,\n    )\n      .then((response) => response.json())\n      .catch((error) => console.log(error));\n\n    const hourly_weather = await fetch(\n      `https://api.climacell.co/v3/weather/forecast/hourly?unit_system=us&start_time=now&end_time=${hourly_date}&lat=${lat}&lon=${long}&apikey=${process.env.REACT_APP_CLIMACELL_KEY}`,\n    )\n      .then((response) => response.json())\n      .catch((error) => console.log(error));\n\n    const week_weather = await fetch(\n      `https://api.climacell.co/v3/weather/forecast/daily?lat=${lat}&lon=${long}&end_time=${weekly_date}&fields%5B%5D=temp&fields%5B%5D=weather_code&unit_system=us&apikey=${process.env.REACT_APP_CLIMACELL_KEY}`,\n    )\n      .then((response) => response.json())\n      .catch((error) => console.log(error));\n\n    Promise.all([day_weather, hourly_weather, week_weather]).then(\n      (values) => {\n        setWeather({\n          day: values[0],\n          hourly: values[1],\n          week: values[2],\n        });\n        setLoading(false);\n      },\n    );\n  };\n\n  useEffect(() => {\n    let lat, long;\n    //default to NYC on load\n    lat = coordinates[0];\n    long = coordinates[1];\n    setLoading(true);\n    fetchData(lat, long);\n  }, [coordinates]);\n\n  const getSelectedLocation = (result) => {\n    setCoordinates([result[1], result[0]]);\n  };\n\n  const getCurrentLocation = () => {\n    const geo = navigator.geolocation;\n    geo.getCurrentPosition((position) => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      setCoordinates([latitude, longitude]);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Control\n        sendLocation={getSelectedLocation}\n        onClick={getCurrentLocation}\n      />\n      {!loading && (\n        <FadeIn>\n          <Details weather={weather.day} />\n          <Main\n            weather={weather.day}\n            date={date}\n            hourly_weather={weather.hourly}\n          />\n          <Map location={coordinates} />\n          <Week weather={weather.week} />\n        </FadeIn>\n      )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}