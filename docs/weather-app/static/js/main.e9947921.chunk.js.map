{"version":3,"sources":["Components/Control.js","Components/Details.js","Components/Main.js","Components/WeekDetails.js","Components/Week.js","Components/Map.js","Components/App.js","serviceWorker.js","index.js"],"names":["Control","props","className","onClick","icon","style","width","placeholder","value","location","onChange","event","name","Details","weather","undefined","wind_speed","units","humidity","dewpoint","weather_code","baro_pressure","Main","day","loading","date","getHours","img_src","includes","process","src","alt","temp","feels_like","WeekDetails","console","log","data","dateReadable","Date","parse","observation_time","toDateString","split","display","alignItems","justifyContent","margin","min","max","Week","week_details","map","index","key","id","Map","lat","lng","zoom","mapField","App","useState","done","setDone","setLocation","setWeather","coordinates","setCoordinates","setDate","useEffect","long","a","getDate","toISOString","fetch","then","response","json","catch","error","day_weather","week_weather","week","fetchData","target","features","center","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","div","library","add","fas","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"uRAGe,SAASA,EAAQC,GAU9B,OACE,yBAAKC,UAAU,WACb,4BACEA,UAAU,SACVC,QAAS,WAEPF,EAAME,QAAQ,OAGhB,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,qBAEjC,2BACEC,MAAO,CAAEC,MAAO,OAChBJ,UAAU,QACVK,YAAY,iBACZC,MAAOP,EAAMQ,SACbC,SAxBN,SAAsBC,GACpBV,EAAMS,SAASC,IAwBXC,KAAK,aAEP,4BAAQV,UAAU,SAASC,QAxB/B,WAEEF,EAAME,QAAQ,OAuBV,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,cC/BxB,SAASS,EAAQZ,GAAQ,IAC9Ba,EAAYb,EAAZa,QAIR,YAFmBC,WAAZD,EAwCA,wCApCH,yBAAKZ,UAAU,kBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,0BAAMA,UAAU,SAAhB,SACA,8BACGY,EAAQE,WAAWR,MADtB,IAC8BM,EAAQE,WAAWC,QAGnD,yBAAKf,UAAU,YACb,0BAAMA,UAAU,SAAhB,aACA,8BACGY,EAAQI,SAASV,MADpB,IAC4BM,EAAQI,SAASD,QAG/C,yBAAKf,UAAU,aACb,0BAAMA,UAAU,SAAhB,cACA,8BACGY,EAAQK,SAASX,MADpB,IAC4BM,EAAQK,SAASF,QAG/C,yBAAKf,UAAU,cACb,0BAAMA,UAAU,SAAhB,eACA,8BAAOY,EAAQM,aAAaZ,QAE9B,yBAAKN,UAAU,YACb,0BAAMA,UAAU,SAAhB,aACA,8BACGY,EAAQO,cAAcb,MAAO,IAC7BM,EAAQO,cAAcJ,UCnCtB,SAASK,EAAKrB,GAAQ,IAM/BsB,EALIT,EAAkBb,EAAlBa,QACJU,OAAUT,EACkBS,OAAbT,WAAZD,EAIMS,EANatB,EAATwB,KAICC,WAEX,GAAY,SAAmB,OACtC,IAIMC,EADN,OAAKH,EAkCE,2CAhCLG,EACKA,EANe,CAAC,gBAAiB,eAAgB,SAK9BC,SAASd,EAAQM,aAAaZ,OAC1C,UAAMqB,IAAN,yBAA6Cf,EAAQM,aAAaZ,OAAlE,OAA0Ee,EAA1E,QACA,UAAMM,IAAN,yBAA6Cf,EAAQM,aAAaZ,MAAlE,QAIV,yBAAKN,UAAU,UACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,aACd,0BAAMA,UAAU,QACd,yBAAK4B,IAAKH,EAASI,IAAI,aAEzB,0BAAM7B,UAAU,eACd,0BAAMA,UAAU,WACd,0BAAMA,UAAU,SAAhB,gBACA,8BACGY,EAAQkB,KAAKxB,MADhB,QAC6BM,EAAQkB,KAAKf,QAG5C,0BAAMf,UAAU,oBACd,0BAAMA,UAAU,SAAhB,eACA,8BACGY,EAAQmB,WAAWzB,MADtB,QAEGM,EAAQmB,WAAWhB,aCpCvB,SAASiB,EAAYjC,GAElCkC,QAAQC,IAAIP,KAF6B,IAKrCF,EAFIU,EAASpC,EAAToC,KAGRV,EACKA,EAHiB,CAAC,gBAAiB,eAAgB,SAEhCC,SAASS,EAAKjB,aAAaZ,OACvC,UAAMqB,IAAN,yBAA6CQ,EAAKjB,aAAaZ,MAA/D,YACA,UAAMqB,IAAN,0BAA8CQ,EAAKjB,aAAaZ,MAAhE,QACZ,IACI8B,EADa,IAAIC,KAAKA,KAAKC,MAAMH,EAAKI,iBAAiBjC,QAC7BkC,eAAeC,MAAM,KAAK,GACxD,OACE,yBACEtC,MAAO,CACLuC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,aAGV,6BAAMT,GACN,6BACE,0BAAMpC,UAAU,QACd,yBAAK4B,IAAKH,EAASI,IAAI,cAG3B,qCACQM,EAAKL,KAAK,GAAGgB,IAAIxC,MADzB,QACsC6B,EAAKL,KAAK,GAAGgB,IAAI/B,MACrD,6BAFF,QAGQoB,EAAKL,KAAK,GAAGiB,IAAIzC,MAHzB,QAGsC6B,EAAKL,KAAK,GAAGiB,IAAIhC,QC5B9C,SAASiC,EAAKjD,GAAO,IAG5BkD,EADclD,EAAZa,QACqBsC,KAAI,SAAC7B,EAAK8B,GAErC,OACE,kBAACnB,EAAD,CAAaG,KAAMd,EAAK+B,IAAKD,EAAOE,GAAIF,OAG5C,YAAgCtC,WAAlBd,EAAMa,QAClB,mCAEAqC,E,qBCPW,SAASK,EAAIvD,GAI1B,OAHAkC,QAAQC,IAAI,IAAKnC,EAAMQ,SAAS,IAChC0B,QAAQC,IAAI,IAAKnC,EAAMQ,SAAS,IAG9B,kBAAC,IAAD,CACEgD,IAAKxD,EAAMQ,SAAS,GACpBiD,IAAKzD,EAAMQ,SAAS,GACpBkD,KAAM,GACNC,SAAS,W,+BCLA,SAASC,IAAO,IAAD,EACJC,wBAAS/C,GADL,mBACrBgD,EADqB,KACfC,EADe,OAEIF,mBAAS,IAFb,mBAErBrD,EAFqB,KAEXwD,EAFW,OAGEH,wBAAS/C,GAHX,mBAGrBD,EAHqB,KAGZoD,EAHY,OAIUJ,mBAAS,CAC7C,WACC,WANyB,mBAIrBK,EAJqB,KAIRC,EAJQ,OAQJN,qBARI,mBAQrBrC,EARqB,KAQf4C,EARe,KAiF5B,OAvEAC,qBAAU,WACR,IAAIb,EAAKc,EAETpC,QAAQC,IAAI+B,GACZV,EAAMU,EAAY,GAClBI,EAAOJ,EAAY,GAEJ,uCAAG,gCAAAK,EAAA,6DACZ/C,EAAO,IAAIc,KACf8B,EAAQ5C,GACRA,EAAK4C,QAAQ5C,EAAKgD,UAAY,GAC9BhD,EAAOA,EAAKiD,cAJI,SAMUC,MAAM,oDAAD,OACuBlB,EADvB,gBACkCc,EADlC,+NAG5BK,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BC,OAAM,SAACC,GAAD,OAAW7C,QAAQC,IAAI4C,MAVhB,cAMVC,EANU,gBAYWN,MAAM,0DAAD,OAC4BlB,EAD5B,gBACuCc,EADvC,qBACwD9C,EADxD,wGAG7BmD,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BC,OAAM,SAACC,GAAD,OAAW7C,QAAQC,IAAI4C,MAhBhB,OAYVE,EAZU,OAyBhBhB,EADiB,CAAE3C,IAAK0D,EAAaE,KAAMD,IAE3ClB,GAAQ,GA1BQ,4CAAH,oDA6BfoB,KACC,CAACjB,IAmCF,yBAAKjE,UAAU,OACb,kBAACF,EAAD,CACES,SAAUA,EACVC,SApCN,SAAsBC,GACpBsD,EAAYtD,EAAM0E,OAAO7E,QAoCrBL,QAAS,CAjCf,WACE6D,GAAQ,GAGRW,MAAM,qDAAD,OACkDlE,EADlD,gHAGFmE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAEL,IAAIpB,EAAMoB,EAASS,SAAS,GAAGC,OAAO,GAClChB,EAAOM,EAASS,SAAS,GAAGC,OAAO,GACvCnB,EAAe,CAACX,EAAKc,OAEtBQ,OAAM,SAACC,GAAD,OAAW7C,QAAQC,IAAI4C,OAGlC,WACEhB,GAAQ,GACIwB,UAAUC,YAClBC,oBAAmB,SAACC,GACtB,IAAMC,EAAWD,EAASE,OAAOD,SAC3BE,EAAYH,EAASE,OAAOC,UAClC1B,EAAe,CAACwB,EAAUE,IAC1B3D,QAAQC,IAAIwD,EAAUE,UAWpB/B,EAaA,6BACE,yBAAK7D,UAAU,aACb,kBAACW,EAAD,CAASC,QAASA,EAAQS,MAC1B,kBAACD,EAAD,CAAMR,QAASA,EAAQS,IAAKE,KAAMA,KAEpC,yBAAKvB,UAAU,OACb,kBAACsD,EAAD,CAAK/C,SAAU0D,KAEjB,yBAAKjE,UAAU,aACb,kBAACgD,EAAD,CAAMpC,QAASA,EAAQqE,SArB3B,yBACEY,KAAG,EACH1F,MAAO,CACLuC,QAAS,OACTE,eAAgB,SAChBD,WAAY,SACZvC,MAAO,SANX,YA3FR0F,IAAQC,IAAIC,KCEQC,QACW,cAA7BC,OAAO3F,SAAS4F,UAEe,UAA7BD,OAAO3F,SAAS4F,UAEhBD,OAAO3F,SAAS4F,SAASC,MACvB,2DCZNnE,QAAQC,IAAI,eAAgBP,KAC5B0E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBnB,WACrBA,UAAUoB,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMgC,c","file":"static/js/main.e9947921.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function Control(props) {\n  // console.log(props);\n  function handleChange(event) {\n    props.onChange(event);\n  }\n  function handleClick() {\n    //1st function in array\n    props.onClick[0]();\n  }\n\n  return (\n    <div className=\"control\">\n      <button\n        className=\"button\"\n        onClick={() => {\n          //2nd function in array\n          props.onClick[1]();\n        }}\n      >\n        <FontAwesomeIcon icon={['fas', 'location-arrow']} />\n      </button>\n      <input\n        style={{ width: '50%' }}\n        className=\"input\"\n        placeholder=\"Enter Location\"\n        value={props.location}\n        onChange={handleChange}\n        name=\"location\"\n      ></input>\n      <button className=\"button\" onClick={handleClick}>\n        <FontAwesomeIcon icon={['fas', 'search']} />\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Details(props) {\n  const { weather } = props;\n  let loading = undefined;\n  typeof weather === undefined ? (loading = true) : (loading = false);\n\n  if (!loading) {\n    return (\n      <div className=\"detailsWrapper\">\n        <div className=\"details\">\n          <div className=\"wind\">\n            <span className=\"label\">Wind:</span>\n            <span>\n              {weather.wind_speed.value} {weather.wind_speed.units}\n            </span>\n          </div>\n          <div className=\"humidity\">\n            <span className=\"label\">Humidity:</span>\n            <span>\n              {weather.humidity.value} {weather.humidity.units}\n            </span>\n          </div>\n          <div className=\"dew_point\">\n            <span className=\"label\">Dew Point:</span>\n            <span>\n              {weather.dewpoint.value} {weather.dewpoint.units}\n            </span>\n          </div>\n          <div className=\"visibility\">\n            <span className=\"label\">Visibility:</span>\n            <span>{weather.weather_code.value}</span>\n          </div>\n          <div className=\"pressure\">\n            <span className=\"label\">Pressure:</span>\n            <span>\n              {weather.baro_pressure.value}{' '}\n              {weather.baro_pressure.units}\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return <div>Loading</div>;\n}\n","import React from 'react';\n\nexport default function Main(props) {\n  const { weather, date } = props;\n  let loading = undefined;\n  typeof weather === undefined ? (loading = true) : (loading = false);\n\n  const time = date.getHours();\n  let day;\n  time > 18 ? (day = '_night') : (day = '_day');\n  const weather_array = ['partly_cloudy', 'mostly_clear', 'clear'];\n\n  // public url:  /Assets/color/\n  if (!loading) {\n    let img_src;\n    img_src = weather_array.includes(weather.weather_code.value)\n      ? (img_src = `${process.env.PUBLIC_URL}/Assets/color/${weather.weather_code.value}${day}.svg`)\n      : (img_src = `${process.env.PUBLIC_URL}/Assets/color/${weather.weather_code.value}.svg`);\n\n    // console.log(img_src);\n    return (\n      <div className=\"center\">\n        <div className=\"title\">\n          <span className=\"currently\">\n            <span className=\"icon\">\n              <img src={img_src} alt=\"product\" />\n            </span>\n            <span className=\"description\">\n              <span className=\"summary\">\n                <span className=\"label\">Temperature:</span>\n                <span>\n                  {weather.temp.value} &deg;{weather.temp.units}\n                </span>\n              </span>\n              <span className=\"summary-high-low\">\n                <span className=\"label\">Feels Like:</span>\n                <span>\n                  {weather.feels_like.value} &deg;\n                  {weather.feels_like.units}\n                </span>\n              </span>\n            </span>\n          </span>\n        </div>\n      </div>\n    );\n  }\n  return <div> Loading </div>;\n}\n","import React from 'react';\n\nexport default function WeekDetails(props) {\n  //   console.log(props);\n  console.log(process.env.PUBLIC_URL);\n  const { data } = props;\n  const weather_array = ['partly_cloudy', 'mostly_clear', 'clear'];\n  let img_src;\n  img_src = weather_array.includes(data.weather_code.value)\n    ? (img_src = `${process.env.PUBLIC_URL}/Assets/color/${data.weather_code.value}_day.svg`)\n    : (img_src = `${process.env.PUBLIC_URL}//Assets/color/${data.weather_code.value}.svg`);\n  let dateObject = new Date(Date.parse(data.observation_time.value));\n  let dateReadable = dateObject.toDateString().split(' ')[0];\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        margin: '.5em 0em',\n      }}\n    >\n      <div>{dateReadable}</div>\n      <div>\n        <span className=\"icon\">\n          <img src={img_src} alt=\"product\" />\n        </span>\n      </div>\n      <div>\n        Min: {data.temp[0].min.value} &deg;{data.temp[0].min.units}\n        <br />\n        Max: {data.temp[1].max.value} &deg;{data.temp[1].max.units}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport WeekDetails from './WeekDetails';\n\nexport default function Week(props) {\n  // console.log(props);\n  const { weather } = props;\n  const week_details = weather.map((day, index) => {\n    // console.log(day);\n    return (\n      <WeekDetails data={day} key={index} id={index}></WeekDetails>\n    );\n  });\n  return typeof props.weather === undefined ? (\n    <div>1 </div>\n  ) : (\n    week_details\n  );\n}\n","import React from 'react';\nimport DarkskyMap from 'react-darksky-map';\n\nconst styles = {\n  width: '100vw',\n  height: '50vh',\n};\n\nexport default function Map(props) {\n  console.log('x', props.location[1]);\n  console.log('y', props.location[0]);\n  \n  return (\n    <DarkskyMap\n      lat={props.location[1]}\n      lng={props.location[0]}\n      zoom={10}\n      mapField=\"precip\"\n    ></DarkskyMap>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Control from './Control';\nimport Details from './Details';\nimport Main from './Main';\nimport Week from './Week';\nimport Map from './Map';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport '../Styles/App.css';\nimport 'bulma/css/bulma.css';\nlibrary.add(fas);\n\nexport default function App() {\n  const [done, setDone] = useState(undefined);\n  const [location, setLocation] = useState('');\n  const [weather, setWeather] = useState(undefined);\n  const [coordinates, setCoordinates] = useState([\n    40.741621,\n    -73.99353,\n  ]);\n  const [date, setDate] = useState();\n\n  useEffect(() => {\n    let lat, long;\n    //default to NYC to get data\n    console.log(coordinates);\n    lat = coordinates[0];\n    long = coordinates[1];\n\n    const fetchData = async function () {\n      let date = new Date();\n      setDate(date);\n      date.setDate(date.getDate() + 7);\n      date = date.toISOString();\n\n      const day_weather = await fetch(\n        `https://api.climacell.co/v3/weather/realtime?lat=${lat}&lon=${long}&unit_system=us&fields%5B%5D=temp&fields%5B%5D=feels_like&fields%5B%5D=baro_pressure&fields%5B%5D=wind_speed&fields%5B%5D=dewpoint&fields%5B%5D=humidity&fields%5B%5D=weather_code&apikey=WgGx8VA8VQUANapmJ6AkIEmObMfbWt9d`,\n      )\n        .then((response) => response.json())\n        .catch((error) => console.log(error));\n\n      const week_weather = await fetch(\n        `https://api.climacell.co/v3/weather/forecast/daily?lat=${lat}&lon=${long}&end_time=${date}&fields%5B%5D=temp&fields%5B%5D=weather_code&unit_system=us&apikey=WgGx8VA8VQUANapmJ6AkIEmObMfbWt9d`,\n      )\n        .then((response) => response.json())\n        .catch((error) => console.log(error));\n\n      // const weather_tiles = await fetch(`https://api.climacell.co/v3/weather/layers/temperature/now/10/1/0.png?apikey=WgGx8VA8VQUANapmJ6AkIEmObMfbWt9d\n      // `)\n      //   .then((response) => response.json())\n      //   .then((response) => console.log(response))\n      //   .catch((error) => console.log(error));\n\n      const combined = { day: day_weather, week: week_weather };\n      setWeather(combined);\n      setDone(true);\n    };\n\n    fetchData();\n  }, [coordinates]);\n\n  function handleChange(event) {\n    setLocation(event.target.value);\n  }\n\n  function handleClick() {\n    setDone(false);\n    //Gets location inputted and fetches geocoded location data\n    //Sends geocode to getWeather function to return weather data and then sets it to state\n    fetch(\n      `https://api.mapbox.com/geocoding/v5/mapbox.places/${location}.json?access_token=pk.eyJ1Ijoic3JpLWdvIiwiYSI6ImNrODUyeHp1YjAyb2wzZXA4b21veGhqdjgifQ.wprAUOeXWkoWy1-nbUd1NQ`,\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        //returns promise of weather-data\n        let lat = response.features[0].center[1];\n        let long = response.features[0].center[0];\n        setCoordinates([lat, long]);\n      })\n      .catch((error) => console.log(error));\n  }\n\n  function getLocation() {\n    setDone(false);\n    const geo = navigator.geolocation;\n    geo.getCurrentPosition((position) => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      setCoordinates([latitude, longitude]);\n      console.log(latitude, longitude);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Control\n        location={location}\n        onChange={handleChange}\n        onClick={[handleClick, getLocation]}\n      />\n      {!done ? (\n        <div\n          div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100%',\n          }}\n        >\n          Loading\n        </div>\n      ) : (\n        <div>\n          <div className=\"main-info\">\n            <Details weather={weather.day} />\n            <Main weather={weather.day} date={date} />\n          </div>\n          <div className=\"map\">\n            <Map location={coordinates} />\n          </div>\n          <div className=\"week-info\">\n            <Week weather={weather.week} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log('public url: ', process.env['PUBLIC_URL']);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}