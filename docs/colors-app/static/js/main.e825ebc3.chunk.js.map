{"version":3,"sources":["components/ColorCard.js","components/ColorList.js","components/Header.js","components/Control.js","components/App.js","react-starter-files/serviceWorker.js","index.js"],"names":["ColorCard","props","useState","toggle","toggleElement","className","style","backgroundColor","colorData","onMouseOver","onMouseLeave","icon","faCopy","size","color","namesData","ColorList","colors","data","colorList","map","index","key","id","hex","name","colorButtons","Header","Control","onChange","onClick","onRefresh","handleChange","event","type","value","hue","placeholder","numColors","min","max","colorScheme","faPlusCircle","faRedoAlt","App","state","nameList","handleClick","bind","handleRefresh","randomColor","split","console","log","fetch","this","method","mode","cache","then","response","json","setState","catch","error","target","count","format","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qTA6BeA,MAzBf,SAAmBC,GAAQ,IAAD,EACQC,qBADR,mBACjBC,EADiB,KACTC,EADS,KAExB,OACE,yBAAKC,UAAU,SACb,yBACEA,UAAU,gBACVC,MAAO,CAAEC,gBAAiBN,EAAMO,WAChCC,YAAa,kBAAML,GAAeD,IAClCO,aAAc,kBAAMN,GAAeD,KAKlCA,EAAS,kBAAC,IAAD,CAAiBQ,KAAMC,IAAQC,KAAK,KAAKC,MAAM,UAAa,MAExE,yBAAKT,UAAU,qBAEb,2BAAIJ,EAAMc,WACV,2BAAId,EAAMO,WACV,+BCJOQ,MAhBf,SAAmBf,GAAQ,IAEnBgB,EADchB,EAAMiB,KAApBC,UACmBC,KAAI,SAACN,EAAOO,GACnC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,GAAIF,EACJb,UAAWM,EAAMU,IACjBT,UAAWD,EAAMW,KACjBC,cAAc,OAIpB,OAAO,yBAAKrB,UAAU,cAAcY,ICVvBU,MAJf,WACE,OAAO,wBAAItB,UAAU,SAAd,8CCCM,SAASuB,EAAQ3B,GAAO,IAE7BiB,EAAuCjB,EAAvCiB,KAAMW,EAAiC5B,EAAjC4B,SAAUC,EAAuB7B,EAAvB6B,QAASC,EAAc9B,EAAd8B,UAEjC,SAASC,EAAaC,GACpBJ,EAASI,GASX,OACE,yBAAK5B,UAAU,qBACb,2BAAOA,UAAU,mBAAjB,YAEE,2BACE6B,KAAK,OACLC,MAAOjB,EAAKkB,IACZP,SAAUG,EACVP,KAAK,MACLY,YAAY,cACZhC,UAAU,WAGd,2BAAOA,UAAU,0BAAjB,4BAEE,2BACE6B,KAAK,SACLT,KAAK,YACLU,MAAOjB,EAAKoB,UACZC,IAAI,IACJC,IAAI,IACJX,SAAUG,EACV3B,UAAU,WAGd,2BAAOA,UAAU,iBAAjB,qBAEE,yBAAKA,UAAU,UACb,4BAAQ8B,MAAOjB,EAAKuB,YAAaZ,SAAUG,EAAcP,KAAK,eAC5D,4BAAQU,MAAM,KACd,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,mBAAd,mBACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,uBAAd,uBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,WAIN,2BAAO9B,UAAU,gBAAjB,iBAEE,4BAAQA,UAAU,sBAAsByB,QAlD9C,WACEA,MAkDM,kBAAC,IAAD,CAAiBnB,KAAM+B,QAG3B,2BAAOrC,UAAU,gBAAjB,iBAEE,4BAAQA,UAAU,SAASyB,QArDjC,SAAuBG,GACrBF,MAqDM,kBAAC,IAAD,CAAiBpB,KAAMgC,S,oBCiGlBC,G,8DA5Jb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXT,IAAK,GACLK,YAAa,GACbH,UAAW,EACXnB,UAAW,GACX2B,SAAU,IAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKhB,aAAe,EAAKA,aAAagB,KAAlB,gBAXR,E,gEAaO,IAAD,OAOdlC,EADaoC,MACIC,MAAM,KAC3BrC,EAAQA,EAAM,GACdsC,QAAQC,IAAIvC,GAGZwC,MAAM,0CAAD,OAA2CxC,EAA3C,kBAA0DyC,KAAKV,MAAMP,WAX3D,CACbkB,OAAQ,MACRC,KAAM,OACNC,MAAO,YASNC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAEL,OADaA,EAAS3C,OACRG,KAAI,SAACN,GACjB,IAAIU,EAAMV,EAAMU,IAAIW,MAMpB,OAJArB,EAAQ,CACNW,KAFSX,EAAMW,KAAKU,MAGpBX,IAAKA,SAKVmC,MAAK,SAACC,GACL,EAAKE,SAAS,CACZ3C,UAAWyC,OAGdG,OAAM,SAACC,GACNZ,QAAQC,IAAIW,Q,mCAIL/B,GAAQ,IAAD,EACMA,EAAMgC,OAAtBxC,EADU,EACVA,KAAMU,EADI,EACJA,MACdoB,KAAKO,SAAL,eACGrC,EAAOU,M,oCAIG,IAAD,OAaRC,GAXac,IAAY,CAC3Bd,IAAK,IAAMmB,KAAKV,MAAMT,IACtB8B,MAAOX,KAAKV,MAAMP,UAClB6B,OAAQ,QAQAZ,KAAKV,MAAMT,KAErBA,GADAA,EAAMA,EAAIe,MAAM,MACN,GAEVG,MAAM,0CAAD,OACuClB,EADvC,iBACmDmB,KAAKV,MAAMJ,YAD9D,kBACmFc,KAAKV,MAAMP,WAXpF,CACbkB,OAAQ,MACRC,KAAM,OACNC,MAAO,YAWNC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACC,GAEL,OADaA,EAAS3C,OACRG,KAAI,SAACN,GACjB,IAAIU,EAAMV,EAAMU,IAAIW,MAMpB,OAJArB,EAAQ,CACNW,KAFSX,EAAMW,KAAKU,MAGpBX,IAAKA,SAKVmC,MAAK,SAACC,GACL,EAAKE,SAAS,CACZ3C,UAAWyC,OAGdG,OAAM,SAACC,GACNZ,QAAQC,IAAIW,Q,oCAIJ/B,GAAQ,IAAD,OAOfnB,EADaoC,MACIC,MAAM,KAC3BrC,EAAQA,EAAM,GAEdwC,MAAM,0CAAD,OACuCxC,EADvC,kBACsDyC,KAAKV,MAAMP,UADjE,iBACmFiB,KAAKV,MAAMJ,aAVpF,CACbe,OAAQ,MACRC,KAAM,OACNC,MAAO,YAUNC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAEL,OADaA,EAAS3C,OACRG,KAAI,SAACN,GACjB,IAAIU,EAAMV,EAAMU,IAAIW,MAMpB,OAJArB,EAAQ,CACNW,KAFSX,EAAMW,KAAKU,MAGpBX,IAAKA,SAKVmC,MAAK,SAACC,GACL,EAAKE,SAAS,CACZ3C,UAAWyC,OAGdG,OAAM,SAACC,GACNZ,QAAQC,IAAIW,Q,+BAIhB,OACE,yBAAK3D,UAAU,eAAeC,MAAO,CAAEC,gBAAiB,eACtD,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,CAAWW,KAAMqC,KAAKV,SAExB,kBAACjB,EAAD,CACEV,KAAMqC,KAAKV,MACXhB,SAAU0B,KAAKvB,aACfF,QAASyB,KAAKR,YACdhB,UAAWwB,KAAKN,qB,GAtJRmB,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAMqB,c","file":"static/js/main.e825ebc3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCopy } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction ColorCard(props) {\n  const [toggle, toggleElement] = useState();\n  return (\n    <div className=\"color\">\n      <div\n        className=\"color-section\"\n        style={{ backgroundColor: props.colorData }}\n        onMouseOver={() => toggleElement(!toggle)}\n        onMouseLeave={() => toggleElement(!toggle)}\n      >\n        {/* Color Part \n          Set BackgroundColor property to be the given color\n        */}\n        {toggle ? <FontAwesomeIcon icon={faCopy} size=\"3x\" color=\"white\" /> : null}\n      </div>\n      <div className=\"color-information\">\n        {/* Color Information */}\n        <p>{props.namesData}</p>\n        <p>{props.colorData}</p>\n        <p></p>\n      </div>\n    </div>\n  );\n}\n\nexport default ColorCard;\n","import React from \"react\";\nimport ColorCard from \"./ColorCard\";\n\nfunction ColorList(props) {\n  let { colorList } = props.data;\n  const colors = colorList.map((color, index) => {\n    return (\n      <ColorCard\n        key={index}\n        id={index}\n        colorData={color.hex}\n        namesData={color.name}\n        colorButtons={false}\n      ></ColorCard>\n    );\n  });\n  return <div className=\"colorCards\">{colors}</div>;\n}\n\nexport default ColorList;\n","import React from \"react\";\n\nfunction Header() {\n  return <h2 className=\"title\">This App Quickly Renders Different Colors</h2>;\n}\n\nexport default Header;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle, faRedoAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function Control(props) {\n  //   console.log(props);\n  const { data, onChange, onClick, onRefresh } = props;\n\n  function handleChange(event) {\n    onChange(event);\n  }\n  function handleClick() {\n    onClick();\n  }\n  function handleRefresh(event) {\n    onRefresh();\n  }\n\n  return (\n    <div className=\"control-container\">\n      <label className=\"hue input-group\">\n        Enter Hue\n        <input\n          type=\"text\"\n          value={data.hue}\n          onChange={handleChange}\n          name=\"hue\"\n          placeholder=\"Eg. #e84643\"\n          className=\"input\"\n        />\n      </label>\n      <label className=\"num-colors input-group\">\n        Enter Number Colors (1-5)\n        <input\n          type=\"number\"\n          name=\"numColors\"\n          value={data.numColors}\n          min=\"1\"\n          max=\"5\"\n          onChange={handleChange}\n          className=\"input\"\n        />\n      </label>\n      <label className=\"select-scheme\">\n        Pick Color Scheme:\n        <div className=\"select\">\n          <select value={data.colorScheme} onChange={handleChange} name=\"colorScheme\">\n            <option value=\"\"></option>\n            <option value=\"monochrome\">Monochrome</option>\n            <option value=\"monochrome-dark\">Monochrome Dark</option>\n            <option value=\"monochrome-light\">Monochrome Light</option>\n            <option value=\"analogic\">Analogic</option>\n            <option value=\"complement\">Complement</option>\n            <option value=\"analogic-complement\">Analogic Complement</option>\n            <option value=\"triad\">Triad</option>\n            <option value=\"quad\">Quad</option>\n          </select>\n        </div>\n      </label>\n      <label className=\"button-group\">\n        Generate Color\n        <button className=\"button button-group\" onClick={handleClick}>\n          <FontAwesomeIcon icon={faPlusCircle} />\n        </button>\n      </label>\n      <label className=\"button-group\">\n        Refresh Colors\n        <button className=\"button\" onClick={handleRefresh}>\n          <FontAwesomeIcon icon={faRedoAlt} />\n        </button>\n      </label>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport ColorList from \"./ColorList\";\nimport Header from \"./Header\";\nimport Control from \"./Control\";\nimport randomColor from \"randomcolor\";\nimport \"../styles/App.css\";\nimport \"react-bulma-components/dist/react-bulma-components.min.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hue: \"\",\n      colorScheme: \"\",\n      numColors: 5,\n      colorList: [],\n      nameList: [],\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount() {\n    const myInit = {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"default\",\n    };\n    const newColor = randomColor();\n    let color = newColor.split(\"#\");\n    color = color[1];\n    console.log(color);\n\n    //Transmit to Color API and return initial list of colors in monochrome scheme\n    fetch(`https://www.thecolorapi.com/scheme?hex=${color}&count=${this.state.numColors}`, myInit)\n      .then((response) => response.json())\n      .then((response) => {\n        let colors = response.colors;\n        return colors.map((color) => {\n          let hex = color.hex.value;\n          let name = color.name.value;\n          color = {\n            name: name,\n            hex: hex,\n          };\n          return color;\n        });\n      })\n      .then((response) => {\n        this.setState({\n          colorList: response,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n  // This Captures the input color and sets it to state\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n  // This Captures the click event and generates a new color through randomColor function\n  handleClick() {\n    //Generate new color\n    const newColor = randomColor({\n      hue: \"#\" + this.state.hue,\n      count: this.state.numColors,\n      format: \"hex\",\n    });\n    const myInit = {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"default\",\n    };\n    // Handle If # is in the input\n    let hue = this.state.hue;\n    hue = hue.split(\"#\");\n    hue = hue[1];\n    // Query the resulting string and update state\n    fetch(\n      `https://www.thecolorapi.com/scheme?hex=${hue}&mode=${this.state.colorScheme}&count=${this.state.numColors}`,\n      myInit,\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        let colors = response.colors;\n        return colors.map((color) => {\n          let hex = color.hex.value;\n          let name = color.name.value;\n          color = {\n            name: name,\n            hex: hex,\n          };\n          return color;\n        });\n      })\n      .then((response) => {\n        this.setState({\n          colorList: response,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n  //This resets state to an empty array\n  handleRefresh(event) {\n    const myInit = {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"default\",\n    };\n    const newColor = randomColor();\n    let color = newColor.split(\"#\");\n    color = color[1];\n\n    fetch(\n      `https://www.thecolorapi.com/scheme?hex=${color}&count=${this.state.numColors}&mode=${this.state.colorScheme}`,\n      myInit,\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        let colors = response.colors;\n        return colors.map((color) => {\n          let hex = color.hex.value;\n          let name = color.name.value;\n          color = {\n            name: name,\n            hex: hex,\n          };\n          return color;\n        });\n      })\n      .then((response) => {\n        this.setState({\n          colorList: response,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n  render() {\n    return (\n      <div className=\"appContainer\" style={{ backgroundColor: \"whitesmoke\" }}>\n        <Header />\n        <div>\n          <ColorList data={this.state} />\n        </div>\n        <Control\n          data={this.state}\n          onChange={this.handleChange}\n          onClick={this.handleClick}\n          onRefresh={this.handleRefresh}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './react-starter-files/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}