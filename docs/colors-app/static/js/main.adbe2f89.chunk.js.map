{"version":3,"sources":["components/ColorCard.js","components/ColorList.js","components/App.js","react-starter-files/serviceWorker.js","index.js"],"names":["ColorCard","props","useState","toggle","toggleElement","className","style","backgroundColor","colorData","onMouseOver","onMouseLeave","icon","faCopy","size","color","ColorList","console","log","colors","data","map","index","key","id","colorButtons","App","state","hue","numColors","colorList","handleClick","bind","handleRefresh","handleChange","event","target","name","value","this","setState","newColor","randomColor","format","length","type","onChange","placeholder","onClick","faPlusCircle","faRedoAlt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8TA2BeA,MAvBf,SAAmBC,GAAQ,IAAD,EACQC,qBADR,mBACjBC,EADiB,KACTC,EADS,KAExB,OACE,yBAAKC,UAAU,SACb,yBACEA,UAAU,gBACVC,MAAO,CAAEC,gBAAiBN,EAAMO,WAChCC,YAAa,kBAAML,GAAeD,IAClCO,aAAc,kBAAMN,GAAeD,KAKlCA,EAAS,kBAAC,IAAD,CAAiBQ,KAAMC,IAAQC,KAAK,KAAKC,MAAM,UAAa,MAExE,yBAAKT,UAAU,qBAEb,+BAAKJ,EAAMO,cCHJO,MAff,SAAmBd,GACjBe,QAAQC,IAAIhB,GACZ,IAAMiB,EAASjB,EAAMkB,KAAKC,KAAI,SAACN,EAAOO,GACpC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,GAAIF,EACJb,UAAWM,EACXU,cAAc,OAIpB,OAAO,yBAAKnB,UAAU,cAAca,I,iBCgEvBO,G,8DAtEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,IAAK,GACLC,UAAW,KACXC,UAAW,IAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBATR,E,yDAYDG,GAAQ,IAAD,EACMA,EAAMC,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdC,KAAKC,SAAL,eACGH,EAAOC,M,kCAKAH,GACV,IAAMM,EAAWC,IAAY,CAC3Bd,IAAKW,KAAKZ,MAAMC,IAChBe,OAAQ,QAEVJ,KAAKZ,MAAMG,UAAUc,OAAS,GAC5BL,KAAKC,SAAS,CACZV,UAAU,GAAD,mBAAMS,KAAKZ,MAAMG,WAAjB,CAA4BW,Q,oCAK7BN,GACZI,KAAKC,SAAS,CACZZ,IAAK,GACLE,UAAW,O,+BAKb,OACE,yBAAKxB,UAAU,eAAeC,MAAO,CAAEC,gBAAiB,eAEtD,6BACE,kBAAC,EAAD,CAAWY,KAAMmB,KAAKZ,MAAMG,aAE9B,yBAAKxB,UAAU,mBACb,2BACEuC,KAAK,OACLP,MAAOC,KAAKZ,MAAMC,IAClBkB,SAAUP,KAAKL,aACfG,KAAK,MACLU,YAAY,iBACZzC,UAAU,uBAEZ,4BAAQA,UAAU,sBAAsB0C,QAAST,KAAKR,aACpD,2CACA,kBAAC,IAAD,CAAiBnB,KAAMqC,OAGzB,4BAAQ3C,UAAU,sBAAsB0C,QAAST,KAAKN,eACpD,6CACA,kBAAC,IAAD,CAAiBrB,KAAMsC,a,GA/DjBC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.adbe2f89.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCopy } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction ColorCard(props) {\n  const [toggle, toggleElement] = useState();\n  return (\n    <div className=\"color\">\n      <div\n        className=\"color-section\"\n        style={{ backgroundColor: props.colorData }}\n        onMouseOver={() => toggleElement(!toggle)}\n        onMouseLeave={() => toggleElement(!toggle)}\n      >\n        {/* Color Part \n          Set BackgroundColor property to be the given color\n        */}\n        {toggle ? <FontAwesomeIcon icon={faCopy} size=\"3x\" color=\"white\" /> : null}\n      </div>\n      <div className=\"color-information\">\n        {/* Color Information */}\n        <p> {props.colorData}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default ColorCard;\n","import React from \"react\";\nimport ColorCard from \"./ColorCard\";\n\nfunction ColorList(props) {\n  console.log(props);\n  const colors = props.data.map((color, index) => {\n    return (\n      <ColorCard\n        key={index}\n        id={index}\n        colorData={color}\n        colorButtons={false}\n      ></ColorCard>\n    );\n  });\n  return <div className=\"colorCards\">{colors}</div>;\n}\n\nexport default ColorList;\n","import React, { useState } from \"react\";\nimport ColorList from \"./ColorList\";\nimport randomColor from \"randomcolor\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle, faRedoAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../styles/App.css\";\nimport \"react-bulma-components/dist/react-bulma-components.min.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hue: \"\",\n      numColors: null,\n      colorList: [],\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  // This Captures the input color and sets it to state\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  // This Captures the click event and generates a new color through randomColor function\n  handleClick(event) {\n    const newColor = randomColor({\n      hue: this.state.hue,\n      format: \"hex\",\n    });\n    this.state.colorList.length < 5 &&\n      this.setState({\n        colorList: [...this.state.colorList, newColor],\n      });\n  }\n\n  //This resets state to an empty array\n  handleRefresh(event) {\n    this.setState({\n      hue: \"\",\n      colorList: [],\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"appContainer\" style={{ backgroundColor: \"whitesmoke\" }}>\n        {/* Generate Colors */}\n        <div>\n          <ColorList data={this.state.colorList} />\n        </div>\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            value={this.state.hue}\n            onChange={this.handleChange}\n            name=\"hue\"\n            placeholder=\"Enter Hue Here\"\n            className=\"input button-group\"\n          ></input>\n          <button className=\"button button-group\" onClick={this.handleClick}>\n            <span>Add Color</span>\n            <FontAwesomeIcon icon={faPlusCircle} />\n          </button>\n          {/* Restart Color Gen */}\n          <button className=\"button button-group\" onClick={this.handleRefresh}>\n            <span>Reset Color</span>\n            <FontAwesomeIcon icon={faRedoAlt} />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './react-starter-files/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}